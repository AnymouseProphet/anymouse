\NeedsTeXFormat{LaTeX2e}
\def\fileversion{0.5}
\def\filedate{2021/07/18}
\ProvidesPackage{anymouse}[\filedate\space v\fileversion]
%% Copyright 2021 The Anymouse Prophet
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This file may also be distributed and/or modified under the
% conditions of the MIT license. See
%   https://opensource.org/licenses/MIT
%
% To include this file in a larger project, you may choose
% one or both licenses at your discretion.
%
\message{`anymouse' v\fileversion, \filedate\space Loads fonts and macros for Pipfrosch Press publications (anymouseprophet)}
%
\newcommand{\ampfontspecloaded}{no}
\newcommand{\ampusefontspec}{no}
%
\RequirePackage{iftex}
\ifpdftex
  %I believe this is the default in modern pdfLaTeX but...
  \RequirePackage[utf8]{inputenc}
\else
  \renewcommand{\ampusefontspec}{yes}
  \@ifpackageloaded{fontspec}{
    \renewcommand{\ampfontspecloaded}{yes}
  }{}
\fi
\RequirePackage{kvoptions}
\RequirePackage{ifthen}
\RequirePackage{siunitx}
\RequirePackage{letltxmacro}
\RequirePackage[table,usenames,dvipsnames]{xcolor}
\RequirePackage{soul}
\RequirePackage{afterpage}
% default states
\newcommand{\ampedition}{canonical}
\newcommand{\textedition}{Canonical PDF}
\newcommand{\ampcolor}{yes}
\newcommand{\mathfonts}{no}
\newcommand{\replacefonts}{no}
\newcommand{\tipafonts}{no}
\newcommand{\lgrgreek}{no}
\newcommand{\mkisbn}{no}
\newcommand{\fontsareloaded}{no}
%
\define@key{amp}{edition}[canonical]{\renewcommand{\ampedition}{#1}}
\define@key{amp}{greek}[txr]{\renewcommand{\lgrgreek}{#1}}
\define@key{amp}{math}[]{\renewcommand{\mathfonts}{yes}}
\define@key{amp}{tipa}[]{\renewcommand{\tipafonts}{yes}}
\define@key{amp}{isbn}[]{\renewcommand{\mkisbn}{yes}}
\InputIfFileExists{./anymouse.cfg}{}{}
\ProcessKeyvalOptions{amp}
% post process
\ifthenelse{\equal{\tipafonts}{yes}}{%
  \renewcommand{\replacefonts}{yes}
}{}
\ifthenelse{\equal{\ampedition}{canonical}}{}{%change defaults as needed
  \ifthenelse{\equal{\ampedition}{reduced}}{
    \renewcommand{\textedition}{Reduced File Size PDF}
    \ifthenelse{\equal{\mathfonts}{yes}}{
      \IfFileExists{mtpro2.sty}{
        \ifthenelse{\equal{\ampfontspecloaded}{no}}{
          \renewcommand{\ampusefontspec}{no}
        }{
          \renewcommand{\ampedition}{notreduced}
        }
      }{% else
        \PackageWarning{anymouse}{MathTime Pro 2 not available, using TeX Gyre fonts}
        \renewcommand{\ampedition}{notreduced}
      }
    }{}
  }{}
  \ifthenelse{\equal{\ampedition}{grayscale}}{
    \renewcommand{\textedition}{Grayscale PDF}
    \renewcommand{\ampcolor}{no}
  }{}
  \ifthenelse{\equal{\ampedition}{greyscale}}{
    \renewcommand{\ampedition}{grayscale}
    \renewcommand{\textedition}{Grayscale PDF}
    \renewcommand{\ampcolor}{no}
  }{}
  \ifthenelse{\equal{\ampedition}{sans}}{
    \renewcommand{\textedition}{Sans Serif PDF}
    \renewcommand{\ampcolor}{no}
  }{}
  \ifthenelse{\equal{\ampedition}{printshop}}{
    \renewcommand{\textedition}{Hardcover}
  }{}
}
\ifthenelse{\equal{\lgrgreek}{no}}{}{%
  \newcommand{\lgrtestfile}{lgr\lgrgreek .fd}
  \IfFileExists{\lgrtestfile}{}{% else
    \PackageWarning{anymouse}{LGR encoding definition \lgrtestfile{} not found, using txr font instead}
    \renewcommand{\lgrgreek}{txr}
  }
  \renewcommand{\replacefonts}{yes}
}
\ifthenelse{\equal{\mkisbn}{yes}}{
  \RequirePackage{ampean13isbn}
}{}

% setup fontenc
\ifthenelse{\equal{\tipafonts}{yes}}{
  \RequirePackage[T3]{fontenc}
}{}
\ifthenelse{\equal{\lgrgreek}{no}}{}{
  \RequirePackage[LGR]{fontenc}
}
\ifthenelse{\equal{\ampusefontspec}{yes}}{
  \ifthenelse{\equal{\ampfontspecloaded}{no}}{
    \RequirePackage{fontspec}
    \renewcommand{\ampfontspecloaded}{yes}
  }{}
}{}
% last encoding
\ifthenelse{\equal{\ampfontspecloaded}{yes}}{
  \RequirePackage[T1,TU]{fontenc}
}{
  \RequirePackage[T1]{fontenc}
}
\ifthenelse{\equal{\replacefonts}{yes}}{
  \RequirePackage{substitutefont}
}{}


%%%  font definitions %%%
\newcommand{\loadreducedfonts}{%
  \renewcommand{\sfdefault}{phv}
  \renewcommand{\rmdefault}{ptm}
}
\newcommand{\loadstandardfonts}{%
  \ifthenelse{\equal{\ampfontspecloaded}{yes}}{
    \setmainfont
      [ Ligatures   = TeX ,
        Extension   = .otf ,
        UprightFont = *-regular ,
        ItalicFont  = *-italic ,
        BoldFont    = *-bold ,
        BoldItalicFont = *-bolditalic ]
      {texgyretermes}
    \setsansfont
      [ Ligatures   = TeX ,
        Extension   = .otf ,
        UprightFont = *-regular ,
        ItalicFont  = *-italic ,
        BoldFont    = *-bold ,
        BoldItalicFont = *-bolditalic ]
      {texgyreheros}
  }{% for pdftex
    \RequirePackage{newtxtext}
  }
}
\newcommand{\loadsansfonts}{%
  \ifthenelse{\equal{\ampfontspecloaded}{yes}}{
    %\defaultfontfeatures{
    %  Ligatures = TeX,
    %  Extension = .ttf}
    \setmainfont
      [ Ligatures   = TeX ,
        Extension   = .ttf ,
        UprightFont = *-Regular ,
        ItalicFont  = *-Italic ,
        BoldFont    = *-Medium ,
        BoldItalicFont = *-MediumItalic ]
      {ClearSans}
    \setsansfont
      [ Ligatures   = TeX ,
        Extension   = .ttf ,
        UprightFont = *-Regular ,
        ItalicFont  = *-Italic ,
        BoldFont    = *-Bold ,
        BoldItalicFont = *-BoldItalic ]
      {ClearSans}
  }{
    \RequirePackage[sfdefault]{ClearSans}
  }
  \RequirePackage{ragged2e}
  \setlength{\RaggedRightParindent}{\parindent}
}
\newcommand{\loadmonofont}{%
  \ifthenelse{\equal{\ampedition}{reduced}}{
    \renewcommand{\ttdefault}{pcr}
  }{
    \RequirePackage{spacemono}
  }
}
\newcommand{\loadmathfonts}{%
  \RequirePackage{amssymb}
  \RequirePackage{amsmath}
  \RequirePackage{bm}
  \ifthenelse{\equal{\ampfontspecloaded}{yes}}{
    \RequirePackage{unicode-math}
    \defaultfontfeatures{
      Extension = .otf}
    \setmathfont{texgyretermes-math.otf}
  }{
    \ifthenelse{\equal{\ampedition}{reduced}}{
      \RequirePackage[lite]{mtpro2}
      %fix bug in mtpro2 -- see https://tex.stackexchange.com/questions/87419/conflict-between-mathtime-pro-2-refcheck-and-braces-in-text-mode
      \DeclareRobustCommand\{{\ifmmode\lbrace\else\textbraceleft\fi}
      \DeclareRobustCommand\}{\ifmmode\rbrace\else\textbraceright\fi}
    }{
      \RequirePackage{newtxmath}
    }
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Define the sans-serif, serif fonts, monospace fonts %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\ifthenelse{\equal{\ampedition}{reduced}}{
  \loadreducedfonts
  \renewcommand{\fontsareloaded}{yes}
}{}
\ifthenelse{\equal{\ampedition}{sans}}{
  \loadsansfonts
  \renewcommand{\fontsareloaded}{yes}
}{}
\ifthenelse{\equal{\fontsareloaded}{no}}{
  \loadstandardfonts
  \renewcommand{\fontsareloaded}{yes}
}{}
\loadmonofont
\ifthenelse{\equal{\mathfonts}{yes}}{
  \loadmathfonts
}{}

% for reducing the monospace font size
\LetLtxMacro\oldttfamily\ttfamily
\DeclareRobustCommand{\ttfamily}{\oldttfamily\csname ttsize\endcsname}
\def\ttsize{\small}
\newcommand{\setttsize}[1]{\def\ttsize{#1}}

%%%%%%%%%%%%%%%%%%%%
% the tipa package %
%%%%%%%%%%%%%%%%%%%%
\ifthenelse{\equal{\tipafonts}{yes}}{
  \RequirePackage[noenc]{tipa}
  \ifthenelse{\equal{\ampedition}{reduced}}{% only needed if courier is the monospace font
    \substitutefont{T3}{\ttdefault}{cmtt}
  }{% only needed if not using pdf14
    \substitutefont{T3}{\rmdefault}{ptm}
    \substitutefont{T3}{\sfdefault}{phv}
  }
}{}

%%%%%%%%%%%%%%%%%%%%%
% LGR Greek support %
%%%%%%%%%%%%%%%%%%%%%
\ifthenelse{\equal{\lgrgreek}{no}}{}{% only do this if not no
  \substitutefont{LGR}{\rmdefault}{\lgrgreek}
  \substitutefont{LGR}{\sfdefault}{\lgrgreek}
  \newcommand{\textgreek}[1]{\begingroup\fontencoding{LGR}\selectfont#1\endgroup}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define type of highlight %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\ifthenelse{\equal{\ampcolor}{yes}}{}{%else
  \renewcommand*{\hl}{\ul}
}

% reset to reduced
\ifthenelse{\equal{\ampedition}{notreduced}}{
  \renewcommand{\ampedition}{reduced}
}{}
%
\endinput
